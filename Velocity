-- ez
local MatchingKey = loadstring(game:HttpGet("https://raw.githubusercontent.com/AlSploit/Velocity/main/SecurityCheck"))()
local SecretKey = "5OKzZB1QFOthIQz26K9AL6woKN5CpWAIPZHKBptEeXpfhHCoi1JiCAAqSIDFj8bB8a48uB9WjuM5E8mbpsaGCM2GB705stgEE5z6"

local LocalPlayer = game.Players.LocalPlayer

shared.VelocityLoaded = true
MatchingKey = true

repeat task.wait() until shared.VelocityLoaded == true and MatchingKey == true

local VelocityApi = loadstring(game:HttpGet("https://raw.githubusercontent.com/AlSploit/Velocity/main/Api"))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local LightingService = game:GetService("Lighting")
local TweenService = game:GetService("TweenService")

local Velocity = Instance.new("ScreenGui")
local ContainerFrame = Instance.new("Frame")
local Blur = Instance.new("BlurEffect")

local DefaultLayoutOrder = 0

Velocity.Name = "Velocity"
Velocity.Parent = game.Players.LocalPlayer.PlayerGui
Velocity.ResetOnSpawn = false

ContainerFrame.Name = "ContainerFrame"
ContainerFrame.Parent = Velocity
ContainerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ContainerFrame.BackgroundTransparency = 1.000
ContainerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ContainerFrame.BorderSizePixel = 0
ContainerFrame.Position = UDim2.new(0, 0, 0.01, 0)
ContainerFrame.Size = UDim2.new(1, 0, 0.959999979, 0)
ContainerFrame.Visible = false

Blur.Parent = LightingService
Blur.Enabled = false
Blur.Size = 16

task.spawn(function()
	UserInputService.InputBegan:Connect(function(Input)
		if Input.KeyCode == Enum.KeyCode.M then
			ContainerFrame.Visible = not ContainerFrame.Visible
			Blur.Enabled = not Blur.Enabled
		end
	end)
end)

function CreateTab(Name)
	local Tab = Instance.new("Frame")
	local TabCorner = Instance.new("UICorner")
	local TabInfo = Instance.new("Frame")
	local TabIcon = Instance.new("ImageLabel")
	local TabName = Instance.new("TextLabel")
	local UIPadding = Instance.new("UIPadding")
	local TabInfoCorner = Instance.new("UICorner")
	local CornerDetail = Instance.new("Frame")
	local TogglesContainer = Instance.new("Frame")
	local ModulesLayout = Instance.new("UIListLayout")
	local UIPadding_4 = Instance.new("UIPadding")
	local UIListLayout_2 = Instance.new("UIListLayout")

	Tab.Name = "Tab"
	Tab.Parent = ContainerFrame
	Tab.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
	Tab.BackgroundTransparency = 1.000
	Tab.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Tab.BorderSizePixel = 0
	Tab.Position = UDim2.new(0, 54, 0, 0)
	Tab.Size = UDim2.new(0, 210, 0, 577)

	TabCorner.CornerRadius = UDim.new(0, 10)
	TabCorner.Name = "TabCorner"
	TabCorner.Parent = Tab

	TabInfo.Name = "TabInfo"
	TabInfo.Parent = Tab
	TabInfo.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	TabInfo.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabInfo.BorderSizePixel = 0
	TabInfo.Size = UDim2.new(0, 210, 0, 39)

	TabIcon.Name = "TabIcon"
	TabIcon.Parent = TabInfo
	TabIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TabIcon.BackgroundTransparency = 1.000
	TabIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabIcon.BorderSizePixel = 0
	TabIcon.Position = UDim2.new(0, 13, 0, 13)
	TabIcon.Size = UDim2.new(0, 15, 0, 15)
	TabIcon.Image = "rbxassetid://14483662459"

	TabName.Name = "TabName"
	TabName.Parent = TabInfo
	TabName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TabName.BackgroundTransparency = 1.000
	TabName.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabName.BorderSizePixel = 0
	TabName.Size = UDim2.new(1, 0, 1, 0)
	TabName.Font = Enum.Font.GothamBold
	TabName.Text = Name
	TabName.TextColor3 = Color3.fromRGB(255, 255, 255)
	TabName.TextSize = 16.000
	TabName.TextWrapped = true
	TabName.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding.Parent = TabName
	UIPadding.PaddingLeft = UDim.new(0, 38)

	TabInfoCorner.CornerRadius = UDim.new(0, 10)
	TabInfoCorner.Name = "TabInfoCorner"
	TabInfoCorner.Parent = TabInfo

	CornerDetail.Name = "CornerDetail"
	CornerDetail.Parent = TabInfo
	CornerDetail.AnchorPoint = Vector2.new(0, 1)
	CornerDetail.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	CornerDetail.BorderColor3 = Color3.fromRGB(0, 0, 0)
	CornerDetail.BorderSizePixel = 0
	CornerDetail.Position = UDim2.new(0, 0, 1, 0)
	CornerDetail.Size = UDim2.new(1, 0, 0, 7)

	TogglesContainer.Name = "TogglesContainer"
	TogglesContainer.Parent = Tab
	TogglesContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TogglesContainer.BackgroundTransparency = 1.000
	TogglesContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TogglesContainer.BorderSizePixel = 0
	TogglesContainer.Position = UDim2.new(0, 0, 0, 39)
	TogglesContainer.Size = UDim2.new(0, 210, 0, 537)

	ModulesLayout.Name = "ModulesLayout"
	ModulesLayout.Parent = TogglesContainer
	ModulesLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	ModulesLayout.SortOrder = Enum.SortOrder.LayoutOrder

	UIPadding_4.Parent = TogglesContainer

	UIListLayout_2.Parent = ContainerFrame
	UIListLayout_2.FillDirection = Enum.FillDirection.Horizontal
	UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout_2.Padding = UDim.new(0, 35)

	return TogglesContainer
end

function CreateToggle(Name, Parent, DefaultValue, CallBack)
	local Toggle = Instance.new("Frame")
	local Toggle_2 = Instance.new("TextButton")
	local UIPadding_2 = Instance.new("UIPadding")
	local DropDownButton = Instance.new("ImageButton")

	local Checker = {["Enabled"] = false}

	function Checker:Toggle(Bool)
		Bool = Bool or (not Checker["Enabled"])
		Checker["Enabled"] = Bool

		if not Bool then
			task.spawn(function()
				CallBack(false)
				Toggle_2.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
			end)
		else
			task.spawn(function()
				CallBack(true)
				Toggle_2.BackgroundColor3 = Color3.new(0.635294, 0.313725, 1)
			end)
		end
	end

	if DefaultValue == true then
		Checker:Toggle()
	end

	task.spawn(function()
		Toggle_2.Activated:Connect(function()
			Checker:Toggle()	
		end)
	end)	

	Toggle.Name = "Toggle"
	Toggle.Parent = Parent
	Toggle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Toggle.BackgroundTransparency = 1.000
	Toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Toggle.BorderSizePixel = 0
	Toggle.Size = UDim2.new(0, 210, 0, 40)

	Toggle.LayoutOrder = DefaultLayoutOrder + 10
	DefaultLayoutOrder = Toggle.LayoutOrder

	Toggle_2.Name = "Toggle"
	Toggle_2.Parent = Toggle
	Toggle_2.BackgroundColor3 = Color3.fromRGB(161, 79, 255)
	Toggle_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Toggle_2.BorderSizePixel = 0
	Toggle_2.Size = UDim2.new(1, 0, 0, 40)
	Toggle_2.AutoButtonColor = false
	Toggle_2.Font = Enum.Font.Gotham
	Toggle_2.Text = Name
	Toggle_2.TextColor3 = Color3.fromRGB(255, 255, 255)
	Toggle_2.TextSize = 14.000
	Toggle_2.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding_2.Parent = Toggle_2
	UIPadding_2.PaddingLeft = UDim.new(0, 13)
	UIPadding_2.PaddingTop = UDim.new(0, 1)

	DropDownButton.Name = "DropDownButton"
	DropDownButton.Parent = Toggle_2
	DropDownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	DropDownButton.BackgroundTransparency = 1.000
	DropDownButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	DropDownButton.BorderSizePixel = 0
	DropDownButton.Position = UDim2.new(0, 165, 0, 12)
	DropDownButton.Rotation = 0
	DropDownButton.Size = UDim2.new(0, 13, 0, 13)
	DropDownButton.Image = "http://www.roblox.com/asset/?id=6026663699"
	DropDownButton.ScaleType = Enum.ScaleType.Fit

	task.spawn(function()
		DropDownButton.Activated:Connect(function()
			if DropDownButton.Rotation == 0 then
				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local RotationTween = TweenService:Create(DropDownButton, TweenInformation, {Rotation = 90})

				RotationTween:Play()
			end

			if DropDownButton.Rotation ~= 0 then
				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local RotationTween = TweenService:Create(DropDownButton, TweenInformation, {Rotation = 0})

				RotationTween:Play()
			end
		end)
	end)

	return Toggle, DropDownButton, Toggle.LayoutOrder
end

function CreateMiniToggle(Name, Parent, DefaultValue, LayoutOrder, CallBack)
	local MiniToggle = Instance.new("Frame")
	local ToggleFrame = Instance.new("Frame")
	local ToggleFrameCorner = Instance.new("UICorner")
	local ToggleButton = Instance.new("TextButton")
	local ToggleButtonC = Instance.new("UICorner")
	local ToggleName = Instance.new("TextLabel")
	local UIPadding_3 = Instance.new("UIPadding")

	local Checker = {["Enabled"] = false}

	function Checker:Toggle(Bool)
		Bool = Bool or (not Checker["Enabled"])
		Checker["Enabled"] = Bool

		if not Bool then
			task.spawn(function()
				CallBack(false)
				ToggleFrame.BackgroundColor3 = Color3.fromRGB(17, 17, 17)

				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local PositionTween = TweenService:Create(ToggleButton, TweenInformation, {Position = UDim2.new(0, 2, 0.5, 0)})

				PositionTween:Play()				
			end)
		else
			task.spawn(function()
				CallBack(true)
				ToggleFrame.BackgroundColor3 = Color3.new(0.635294, 0.313725, 1)

				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local PositionTween = TweenService:Create(ToggleButton, TweenInformation, {Position = UDim2.new(0, 14, 0.5, 0)})

				PositionTween:Play()		
			end)
		end
	end

	if DefaultValue == true then
		Checker:Toggle()
	end

	task.spawn(function()
		ToggleButton.Activated:Connect(function()
			Checker:Toggle()	
		end)
	end)	

	MiniToggle.Name = "MiniToggle"
	MiniToggle.Parent = Parent
	MiniToggle.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	MiniToggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	MiniToggle.BorderSizePixel = 0
	MiniToggle.Size = UDim2.new(0, 210, 0, 30)	
	MiniToggle.LayoutOrder = LayoutOrder

	ToggleFrame.Name = "ToggleFrame"
	ToggleFrame.Parent = MiniToggle
	ToggleFrame.BackgroundColor3 = Color3.fromRGB(161, 79, 255)
	ToggleFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleFrame.BorderSizePixel = 0
	ToggleFrame.Position = UDim2.new(0.809523761, 0, 0.166666672, 0)
	ToggleFrame.Size = UDim2.new(0.142857134, 0, 0.666666687, 0)

	ToggleFrameCorner.CornerRadius = UDim.new(0, 10)
	ToggleFrameCorner.Name = "ToggleFrameCorner"
	ToggleFrameCorner.Parent = ToggleFrame

	ToggleButton.Name = "ToggleButton"
	ToggleButton.Parent = ToggleFrame
	ToggleButton.AnchorPoint = Vector2.new(0, 0.5)
	ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleButton.BorderSizePixel = 0
	ToggleButton.Position = UDim2.new(0, 14, 0.5, 0)
	ToggleButton.Size = UDim2.new(0, 14, 0, 14)
	ToggleButton.AutoButtonColor = false
	ToggleButton.Font = Enum.Font.SourceSans
	ToggleButton.Text = ""
	ToggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
	ToggleButton.TextSize = 14.000

	ToggleButtonC.CornerRadius = UDim.new(1, 0)
	ToggleButtonC.Name = "ToggleButtonC"
	ToggleButtonC.Parent = ToggleButton

	ToggleName.Name = "ToggleName"
	ToggleName.Parent = MiniToggle
	ToggleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ToggleName.BackgroundTransparency = 1.000
	ToggleName.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleName.BorderSizePixel = 0
	ToggleName.Size = UDim2.new(1, 0, 1, 0)
	ToggleName.Font = Enum.Font.Gotham
	ToggleName.Text = Name
	ToggleName.TextColor3 = Color3.fromRGB(255, 255, 255)
	ToggleName.TextSize = 14.000
	ToggleName.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding_3.Parent = ToggleName
	UIPadding_3.PaddingLeft = UDim.new(0, 10)

	return MiniToggle
end

function CreateSlider(Name, Parent, DefaultValue, MaximumValue, LayoutOrder, CallBack)
	local Slider = Instance.new("Frame")
	local SliderName = Instance.new("TextLabel")
	local SliderNamePadding = Instance.new("UIPadding")
	local SliderMain = Instance.new("Frame")
	local Fill = Instance.new("Frame")
	local FillCircle = Instance.new("TextButton")
	local FillCircleCorner = Instance.new("UICorner")
	local SliderValue = Instance.new("TextLabel")
	local SliderValuePadding = Instance.new("UIPadding")

	Slider.Name = "Slider"
	Slider.Parent = Parent
	Slider.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	Slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Slider.BorderSizePixel = 0
	Slider.LayoutOrder = 10
	Slider.Size = UDim2.new(0, 210, 0, 40)
	Slider.LayoutOrder = LayoutOrder

	SliderName.Name = "SliderName"
	SliderName.Parent = Slider
	SliderName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SliderName.BackgroundTransparency = 1.000
	SliderName.BorderColor3 = Color3.fromRGB(0, 0, 0)
	SliderName.BorderSizePixel = 0
	SliderName.Size = UDim2.new(1, 0, 1, 0)
	SliderName.Font = Enum.Font.Gotham
	SliderName.Text = Name
	SliderName.TextColor3 = Color3.fromRGB(255, 255, 255)
	SliderName.TextSize = 14.000
	SliderName.TextXAlignment = Enum.TextXAlignment.Left

	SliderNamePadding.Name = "SliderNamePadding"
	SliderNamePadding.Parent = SliderName
	SliderNamePadding.PaddingBottom = UDim.new(0, 12)
	SliderNamePadding.PaddingLeft = UDim.new(0, 10)

	SliderMain.Name = "SliderMain"
	SliderMain.Parent = Slider
	SliderMain.AnchorPoint = Vector2.new(0.5, 0)
	SliderMain.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
	SliderMain.BorderColor3 = Color3.fromRGB(0, 0, 0)
	SliderMain.BorderSizePixel = 0
	SliderMain.Position = UDim2.new(0.5, 0, 0, 28)
	SliderMain.Size = UDim2.new(1, -20, 0, 2)

	Fill.Name = "Fill"
	Fill.Parent = SliderMain
	Fill.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
	Fill.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Fill.BorderSizePixel = 0
	Fill.Size = UDim2.new(0, 35, 1, 0)

	FillCircle.Name = "FillCircle"
	FillCircle.Parent = SliderMain
	FillCircle.AnchorPoint = Vector2.new(0, 0.5)
	FillCircle.BackgroundColor3 = Color3.fromRGB(161, 79, 255)
	FillCircle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	FillCircle.BorderSizePixel = 0
	FillCircle.Position = UDim2.new(1, -5, 0.5, 0)
	FillCircle.Size = UDim2.new(0, 10, 0, 10)
	FillCircle.AutoButtonColor = false
	FillCircle.Font = Enum.Font.SourceSans
	FillCircle.Text = ""
	FillCircle.TextColor3 = Color3.fromRGB(0, 0, 0)
	FillCircle.TextSize = 14.000

	FillCircleCorner.CornerRadius = UDim.new(1, 0)
	FillCircleCorner.Name = "FillCircleCorner"
	FillCircleCorner.Parent = FillCircle

	SliderValue.Name = "SliderValue"
	SliderValue.Parent = Slider
	SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SliderValue.BackgroundTransparency = 1.000
	SliderValue.BorderColor3 = Color3.fromRGB(0, 0, 0)
	SliderValue.BorderSizePixel = 0
	SliderValue.Size = UDim2.new(1, 0, 1, 0)
	SliderValue.Font = Enum.Font.Gotham
	SliderValue.Text = DefaultValue
	SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
	SliderValue.TextSize = 14.000
	SliderValue.TextXAlignment = Enum.TextXAlignment.Right

	SliderValuePadding.Name = "SliderValuePadding"
	SliderValuePadding.Parent = SliderValue
	SliderValuePadding.PaddingBottom = UDim.new(0, 12)
	SliderValuePadding.PaddingRight = UDim.new(0, 10)

	local Debounce = true

	local function Snap(Number, Factor)
		if Factor == 0 then
			return Number
		else
			return math.floor(Number / Factor + 0.5) * Factor

		end
	end

	task.spawn(function()
		FillCircle.MouseButton1Down:Connect(function()
			Debounce = false
		end)

		UserInputService.InputEnded:connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Debounce = true
			end
		end)
	end)

	task.spawn(function()
		local BarPosition = FillCircle.Position

		local TweenInformation = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
		local PositionTween = TweenService:Create(FillCircle, TweenInformation, {Position = UDim2.new(DefaultValue / MaximumValue - 0.025, 0, BarPosition.Y.Scale, BarPosition.Y.Offset)})

		PositionTween:Play()

		local TweenInformation = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
		local SizeTween = TweenService:Create(Fill, TweenInformation, {Size = UDim2.new(DefaultValue / MaximumValue, 0, 1, 0)})

		SizeTween:Play()
	end)

	task.spawn(function()
		repeat
			task.wait()

			if Debounce == false then
				local MousePosition = UserInputService:GetMouseLocation().X
				local BarPosition = FillCircle.Position
				local FrameSize = Slider.AbsoluteSize.X
				local FramePosition = Slider.AbsolutePosition.X

				local Position = Snap((MousePosition - FramePosition) / FrameSize, 0.01)

				local Percentage = math.clamp(Position, 0, 1)

				local TweenInformation = TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local PositionTween = TweenService:Create(FillCircle, TweenInformation, {Position = UDim2.new(Percentage - 0.025, 0, BarPosition.Y.Scale, BarPosition.Y.Offset)})

				PositionTween:Play()

				local TweenInformation = TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local SizeTween = TweenService:Create(Fill, TweenInformation, {Size = UDim2.new(Percentage, 0, 1, 0)})

				SizeTween:Play()

				SliderValue.Text = math.round(Percentage * MaximumValue)

				CallBack(math.round(Percentage * MaximumValue))
			end
		until not Slider
	end)

	return Slider
end

local Settings = {
	ChestStealer = {Value = true},
	NoClickDelay = {Value = true},
	AutoClicker = {Value = false},
	InfiniteFly = {Value = false, Speed = 23},
	DamageBoost = {Value = true},
	AutoSprint = {Value = true},
	FovChanger = {Value = true, Fov = 120},
	Indicators = {Value = true},
	NoSlowDown = {Value = true},
	PlayAgain = {Value = true},
	HighJump = {Value = true},
	KillAura = {Value = true, DiamondGuardians = true, CustomAnimation = true, Range = 18}, 
	Velocity = {Value = true}, 
	FpsBoost = {Value = true},
	Scaffold = {Value = false},
	AntiVoid = {Value = true, Transparency = 0.65},
	AutoBank = {Value = true},
	PlayerTp = {Value = true},
	Gravity = {Value = false, Amount = 196},
	AutoBuy = {Value = true},
	AntiBan = {Value = true},
	DeathTp = {Value = false},
	Aimbot = {Value = true},
	NoClip = {Value = false},
	NoFall = {Value = true},
	Spider = {Value = true},
	Nuker = {Value = true, BreakOres = true, Range = 30},
	Reach = {Value = true, Range = 18},
	Speed = {Value = true, Amount = 23},
	BedTp = {Value = false},
	Fly = {Value = false},
	Esp = {Value = true},
	Sky = {Value = true}
}

local Client = VelocityApi.Client

local DamageIndicator = VelocityApi.DamageIndicator

local BlockPlacingRemote = VelocityApi.BlockPlacingRemote

local SprintController = VelocityApi.SprintController
local SwordController = VelocityApi.SwordController
local FovController = VelocityApi.FovController

local Blocks = VelocityApi.Blocks

local function GetServerPosition(Position, NoRemove)
	local X = math.round(Position.X / 3)
	local Y = math.round(Position.Y / 3)
	local Z = math.round(Position.Z / 3)

	return Vector3.new(X, (NoRemove and Y or Y - 1), Z)
end

function GetInventory(Player)
	if not Player then 
		return {Items = {}, Armor = {}}
	end

	local Success, Return = pcall(function() 
		return require(ReplicatedStorage.TS.inventory["inventory-util"]).InventoryUtil.getInventory(Player)
	end)

	if not Success then 
		return {Items = {}, Armor = {}}
	end
	if Player.Character and Player.Character:FindFirstChild("InventoryFolder") then 
		local InvFolder = Player.Character:FindFirstChild("InventoryFolder").Value
		if not InvFolder then return Return end
		for i, v in next, Return do 
			for i2, v2 in next, v do 
				if typeof(v2) == 'table' and v2.itemType then
					v2.instance = InvFolder:FindFirstChild(v2.itemType)
				end
			end
			if typeof(v) == 'table' and v.itemType then
				v.instance = InvFolder:FindFirstChild(v.itemType)
			end
		end
	end

	return Return
end

function GetBlocks()
	for i, v in next, GetInventory() do
		if Blocks:find(v.itemType).Block ~= nil then
			return v.itemType, v.amount
		end
	end
end

function IsAlive(Player)
	Player = Player or LocalPlayer

	if not Player.Character then return false end
	if not Player.Character:FindFirstChild("Head") then return false end
	if not Player.Character:FindFirstChild("Humanoid") then return false end
	if Player.Character:GetAttribute("Health") <= 0 then return false end
	if not Player.Character:FindFirstChild("HumanoidRootPart") then return false end	
	
	return true
end

local ComabatTab = CreateTab("Combat")
local BlatantTab = CreateTab("Blatant")
local UtilityTab = CreateTab("Utility")
local WorldTab = CreateTab("World")

task.spawn(function()
	local DamageBoost = CreateToggle("DamageBoost", ComabatTab, Settings.DamageBoost.Value, function(CallBack)
		Settings.DamageBoost.Value = CallBack
	end)
end)

task.spawn(function()
	local NoClickDelay = CreateToggle("NoClickDelay", ComabatTab, Settings.NoClickDelay.Value, function(CallBack)
		Settings.NoClickDelay.Value = CallBack
		
		local OldNoClickDelayFunction = SwordController.isClickingTooFast
		
		if CallBack == true then
			SwordController.isClickingTooFast = function(...) 
				return false
			end
		end		
		
		if CallBack == false then
			SwordController.isClickingTooFast = OldNoClickDelayFunction
		end
	end)
end)

task.spawn(function()
	local AutoClicker = CreateToggle("AutoClicker", ComabatTab, Settings.AutoClicker.Value, function(CallBack)
		Settings.AutoClicker.Value = CallBack
	end)
end)

task.spawn(function()
	local Velocity = CreateToggle("Velocity", ComabatTab, Settings.Velocity.Value, function(CallBack)
		Settings.Velocity.Value = CallBack
	end)
end)

task.spawn(function()
	local KillAura, DropDownButton, LayoutOrder = CreateToggle("KillAura", ComabatTab, Settings.KillAura.Value, function(CallBack)
		Settings.KillAura.Value = CallBack
	end)
	
	local DiamondGuardiansValue = true
	local DiamondGuardians

	local CustomAnimationsValue = true
	local CustomAnimations

	local RangeValue = true
	local Range

	DropDownButton.Activated:Connect(function()
		if DiamondGuardiansValue == true then
			DiamondGuardians = CreateMiniToggle("DiamondGuardians", ComabatTab, Settings.KillAura.DiamondGuardians, LayoutOrder + 1, function(CallBack)
				Settings.KillAura.DiamondGuardians = CallBack
			end)
		end
		
		if CustomAnimationsValue == true then
			CustomAnimations = CreateMiniToggle("CustomAnimations", ComabatTab, Settings.KillAura.CustomAnimation, LayoutOrder + 2, function(CallBack)
				Settings.KillAura.CustomAnimation = CallBack
			end)
		end

		if RangeValue == true then
			Range = CreateSlider("Range", ComabatTab, Settings.KillAura.Range, 18, LayoutOrder + 3, function(CallBack)
				Settings.KillAura.Range = CallBack
			end)
		end
		
		if DiamondGuardiansValue == false then
			DiamondGuardians:Destroy()
		end

		if CustomAnimationsValue == false then
			CustomAnimations:Destroy()
		end

		if RangeValue == false then
			Range:Destroy()
		end

		DiamondGuardiansValue = not DiamondGuardiansValue
		CustomAnimationsValue = not CustomAnimationsValue
		RangeValue = not RangeValue
	end)
end)

task.spawn(function()
	local Aimbot, DropDownButton, LayoutOrder = CreateToggle("Aimbot", ComabatTab, Settings.Aimbot.Value, function(CallBack)
		Settings.Aimbot.Value = CallBack
	end)
end)

task.spawn(function()
	local Reach, DropDownButton, LayoutOrder = CreateToggle("Reach", ComabatTab, Settings.Reach.Value, function(CallBack)
		Settings.Reach.Value = CallBack
	end)
	
	local RangeValue = true
	local Range

	DropDownButton.Activated:Connect(function()
		if RangeValue == true then
			Range = CreateSlider("Range", ComabatTab, Settings.Reach.Range, 18, LayoutOrder + 1, function(CallBack)
				Settings.Reach.Range = CallBack
			end)
		end

		if RangeValue == false then
			Range:Destroy()
		end

		RangeValue = not RangeValue
	end)
end)

task.spawn(function()
	local HighJump = CreateToggle("HighJump", BlatantTab, Settings.HighJump.Value, function(CallBack)
		Settings.HighJump.Value = CallBack
	end)
end)

task.spawn(function()
	local InfiniteFly = CreateToggle("InfiniteFly", BlatantTab, Settings.InfiniteFly.Value, function(CallBack)
		Settings.InfiniteFly.Value = CallBack
	end)
end)

task.spawn(function()
	local Scaffold = CreateToggle("Scaffold", BlatantTab, Settings.Scaffold.Value, function(CallBack)
		Settings.Scaffold.Value = CallBack

		repeat
			task.wait()

			if IsAlive(LocalPlayer) then
				local Block = GetBlocks()
				
				if Block  then
					local PlacingPosition = GetServerPosition(LocalPlayer.Character.HumanoidRootPart.Position) + (UserInputService:IsKeyDown(Enum.KeyCode.Space) and Vector3.new(0, 1, 0) or Vector3.new(0, 0, 0)) + (UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) and Vector3.new(0, -1, 0) or Vector3.new(0, 0, 0))
					
					BlockPlacingRemote:InvokeServer({
						["position"] = PlacingPosition,
						["BlockType"] = Block
					})
					
					if UserInputService:IsKeyDown(Enum.KeyCode.S) then
						for i = 1 ,3 do
							BlockPlacingRemote:InvokeServer({
								["position"] = PlacingPosition + (LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * -i),
								["BlockType"] = Block
							})
						end
					end
					
					if UserInputService:IsKeyDown(Enum.KeyCode.W) then
						for i = 1, 3 do
							BlockPlacingRemote:InvokeServer({
								["position"] = PlacingPosition + (LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * i),
								["BlockType"] = Block
							})
						end
					end
				end
			end
		until CallBack == false
	end)
end)

task.spawn(function()
	local AutoBuy = CreateToggle("AutoBuy", BlatantTab, Settings.AutoBuy.Value, function(CallBack)
		Settings.AutoBuy.Value = CallBack
	end)
end)

task.spawn(function()
	local Gravity, DropDownButton, LayoutOrder = CreateToggle("Gravity", BlatantTab, Settings.Gravity.Value, function(CallBack)
		Settings.Gravity.Value = CallBack
	end)
	
	local AmountValue = true
	local Amount

	DropDownButton.Activated:Connect(function()
		if AmountValue == true then
			Amount = CreateSlider("Amount", BlatantTab, Settings.Gravity.Amount, 196, LayoutOrder + 1, function(CallBack)
				Settings.Gravity.Amount = CallBack
			end)
		end

		if AmountValue == false then
			Amount:Destroy()
		end

		AmountValue = not AmountValue
	end)
end)

task.spawn(function()
	local NoClip = CreateToggle("NoClip", BlatantTab, Settings.NoClip.Value, function(CallBack)
		Settings.NoClip.Value = CallBack
	end)
end)

task.spawn(function()
	local NoFall = CreateToggle("NoFall", BlatantTab, Settings.NoFall.Value, function(CallBack)
		Settings.NoFall.Value = CallBack
	end)
end)

task.spawn(function()
	local Spider = CreateToggle("Spider", BlatantTab, Settings.Spider.Value, function(CallBack)
		Settings.Spider.Value = CallBack
	end)
end)

task.spawn(function()
	local Speed, DropDownButton, LayoutOrder = CreateToggle("Speed", BlatantTab, Settings.Speed.Value, function(CallBack)
		Settings.Speed.Value = CallBack
	end)
	
	local AmountValue = true
	local Amount

	DropDownButton.Activated:Connect(function()
		if AmountValue == true then
			Amount = CreateSlider("Amount", BlatantTab, Settings.Speed.Amount, 23, LayoutOrder + 1, function(CallBack)
				Settings.Amount.Range = CallBack
			end)
		end
		
		if AmountValue == false then
			Amount:Destroy()
		end
		
		AmountValue = not AmountValue
	end)
end)

task.spawn(function()
	local Fly = CreateToggle("Fly", BlatantTab, Settings.Fly.Value, function(CallBack)
		Settings.Fly.Value = CallBack
	end)
end)

task.spawn(function()
	local ChestStealer = CreateToggle("ChestStealer", UtilityTab, Settings.ChestStealer.Value, function(CallBack)
		Settings.ChestStealer.Value = CallBack
	end)
end)

task.spawn(function()
	local NoSlowDown = CreateToggle("NoSlowDown", UtilityTab, Settings.NoSlowDown.Value, function(CallBack)
		Settings.NoSlowDown.Value = CallBack
	end)
end)

task.spawn(function()
	local AutoSprint = CreateToggle("AutoSprint", UtilityTab, Settings.AutoSprint.Value, function(CallBack)
		Settings.AutoSprint.Value = CallBack
		
		local OldAutoSprintFunction

		if CallBack == true then
			OldAutoSprintFunction = SprintController.stopSprinting

			SprintController.stopSprinting = function(...)
				local Returning = OldAutoSprintFunction(...)

				SprintController:startSprinting()

				return Returning
			end

			SprintController:startSprinting()
		end

		if CallBack == false then
			SprintController.stopSprinting = OldAutoSprintFunction
			SprintController:stopSprinting()
		end
	end)
end)

task.spawn(function()
	local AutoBank = CreateToggle("AutoBank", UtilityTab, Settings.AutoBank.Value, function(CallBack)
		Settings.AutoBank.Value = CallBack
	end)
end)

task.spawn(function()
	local PlayAgain = CreateToggle("PlayAgain", UtilityTab, Settings.PlayAgain.Value, function(CallBack)
		Settings.PlayAgain.Value = CallBack
	end)
end)

task.spawn(function()
	local FpsBoost = CreateToggle("FpsBoost", UtilityTab, Settings.FpsBoost.Value, function(CallBack)
		Settings.FpsBoost.Value = CallBack
	end)
end)

task.spawn(function()
	local AntiBan = CreateToggle("AntiBan", UtilityTab, Settings.AntiBan.Value, function(CallBack)
		Settings.AntiBan.Value = CallBack
	end)
end)

task.spawn(function()
	local Esp = CreateToggle("Esp", UtilityTab, Settings.Esp.Value, function(CallBack)
		Settings.Esp.Value = CallBack
	end)
end)

task.spawn(function()
	local OldSetFov = FovController.setFOV
	local OldGetFov = FovController.getFOV
	
	local FovChanger, DropDownButton, LayoutOrder = CreateToggle("FovChanger", WorldTab, Settings.FovChanger.Value, function(CallBack)
		Settings.FovChanger.Value = Settings.FovChanger.Fov			
		
		if CallBack == true then
			FovController:setFOV(Settings)
		end

		if CallBack == false then
			FovController.setFOV = OldSetFov
		end
	end)

	local FovValue = true
	local Fov

	DropDownButton.Activated:Connect(function()
		if FovValue == true then
			FovChanger = CreateSlider("Fov", WorldTab, Settings.FovChanger.Fov, 120, LayoutOrder + 1, function(CallBack)
				Settings.FovChanger.Fov = CallBack
				
				if Settings.FovChanger.Value == true then
					FovController:setFOV(CallBack)
				end
			end)
		end

		if FovValue == false then
			FovChanger:Destroy()
		end

		FovValue = not FovValue
	end)
end)

task.spawn(function()
	local Indicators = CreateToggle("Indicators", WorldTab, Settings.PlayerTp.Value, function(CallBack)
		Settings.Indicators.Value = CallBack
		
		if CallBack == true then
			local Messages = {"Velocity", "💀", "Pew", "Bop"}

			debug.setupvalue(DamageIndicator, 10, {Create = function(self, obj, ...)
					task.spawn(function()                
						if Settings.Indicators.Value == true then
							local Message = Messages[math.random(#Messages)]

							obj.Parent.Text = Message
							obj.Parent.TextColor3 = Color3.fromHSV(tick() % 10 / 10, 2, 2)

							task.spawn(function()                        
								task.wait(0.75)

								if Settings.Indicators.Value == true then
									obj.Parent:Destroy()
								end
							end)
						end
					end)
				end
			})
		end
	end)
end)

task.spawn(function()
	local PlayerTp = CreateToggle("PlayerTp", WorldTab, Settings.PlayerTp.Value, function(CallBack)
		Settings.PlayerTp.Value = CallBack
	end)
end)

task.spawn(function()
	local DeathTp = CreateToggle("DeathTp", WorldTab, Settings.DeathTp.Value, function(CallBack)
		Settings.DeathTp.Value = CallBack
	end)
end)

task.spawn(function()
	local AntiVoid, DropDownButton, LayoutOrder = CreateToggle("AntiVoid", WorldTab, Settings.AntiVoid.Value, function(CallBack)
		Settings.AntiVoid.Value = CallBack
	end)
	
	local TransparencyValue = true
	local Transparency

	DropDownButton.Activated:Connect(function()
		if TransparencyValue == true then
			Transparency = CreateSlider("Transparency", WorldTab, Settings.AntiVoid.Transparency * 100, 100, LayoutOrder + 1, function(CallBack)
				Settings.AntiVoid.Transparency = CallBack / 100
			end)
		end

		if TransparencyValue == false then
			Transparency:Destroy()
		end

		TransparencyValue = not TransparencyValue
	end)
end)

task.spawn(function()
	local BedTp = CreateToggle("BedTp", WorldTab, Settings.BedTp.Value, function(CallBack)
		Settings.BedTp.Value = CallBack
	end)
end)

task.spawn(function()
	local Nuker, DropDownButton, LayoutOrder = CreateToggle("Nuker", WorldTab, Settings.Nuker.Value, function(CallBack)
		Settings.Nuker.Value = CallBack
	end)
	
	local BreakOresValue = true
	local BreakOres

	local RangeValue = true
	local Range

	DropDownButton.Activated:Connect(function()
		if BreakOresValue == true then
			BreakOres = CreateMiniToggle("BreakOres", WorldTab, Settings.Nuker.BreakOres, LayoutOrder + 1, function(CallBack)
				Settings.Nuker.BreakOres = CallBack
			end)
		end

		if RangeValue == true then
			Range = CreateSlider("Range", WorldTab, Settings.Nuker.Range, 30, LayoutOrder + 2, function(CallBack)
				Settings.Nuker.Range = CallBack
			end)
		end

		if BreakOresValue == false then
			BreakOres:Destroy()
		end

		if RangeValue == false then
			Range:Destroy()
		end

		BreakOresValue = not BreakOresValue
		RangeValue = not RangeValue
	end)
end)

task.spawn(function()
	local Sky = CreateToggle("Sky", WorldTab, Settings.Sky.Value, function(CallBack)
		Settings.Sky.Value = CallBack
	end)
end)

task.spawn(function()
	repeat
		task.wait()
		
		FovController:setFOV(Settings.FovChanger.Fov)
	until not game
end)
